package com.hexagram2021.skullcraft.common.loot;

import com.mojang.datafixers.Products;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.minecraft.world.level.storage.loot.predicates.LootItemConditions;
import net.minecraftforge.common.loot.IGlobalLootModifier;

import javax.annotation.Nonnull;
import java.util.function.Predicate;

public abstract class OrConditionLootModifier implements IGlobalLootModifier {
	protected final LootItemCondition[] conditions;
	private final Predicate<LootContext> combinedConditions;

	public static <T extends OrConditionLootModifier> Products.P1<RecordCodecBuilder.Mu<T>, LootItemCondition[]> codecStart(RecordCodecBuilder.Instance<T> instance) {
		return instance.group(LOOT_CONDITIONS_CODEC.fieldOf("conditions").forGetter(lm -> lm.conditions));
	}

	/**
	 * Constructs a OrConditionLootModifier.
	 * @param conditionsIn the ILootConditions that need to be matched before the loot is modified.
	 */
	protected OrConditionLootModifier(LootItemCondition[] conditionsIn) {
		this.conditions = conditionsIn;
		this.combinedConditions = LootItemConditions.orConditions(conditionsIn);
	}

	@Nonnull
	@Override
	public final ObjectArrayList<ItemStack> apply(ObjectArrayList<ItemStack> generatedLoot, LootContext context) {
		return this.combinedConditions.test(context) ? this.doApply(generatedLoot, context) : generatedLoot;
	}

	/**
	 * Applies the modifier to the generated loot (all loot conditions have already been checked
	 * and have returned true).
	 * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
	 * @param context the LootContext, identical to what is passed to loot tables
	 * @return modified loot drops
	 */
	@Nonnull
	protected abstract ObjectArrayList<ItemStack> doApply(ObjectArrayList<ItemStack> generatedLoot, LootContext context);
}
